// Code generated by girgen. DO NOT EDIT.

package flatpak

import (
	"fmt"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <flatpak.h>
// #include <glib-object.h>
import "C"

// glib.Type values for flatpak-error.go.
var GTypeError = externglib.Type(C.flatpak_error_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeError, F: marshalError},
	})
}

// Error codes for library functions.
type Error C.gint

const (
	// ErrorAlreadyInstalled: app/runtime/remote is already installed.
	ErrorAlreadyInstalled Error = iota
	// ErrorNotInstalled: app/runtime is not installed.
	ErrorNotInstalled
	// ErrorOnlyPulled: app/runtime was only pulled into the local repository
	// but not installed.
	ErrorOnlyPulled
	// ErrorDifferentRemote: app/Runtime is already installed, but from a
	// different remote.
	ErrorDifferentRemote
	// ErrorAborted: transaction was aborted (returned TRUE in operation-error
	// signal).
	ErrorAborted
	// ErrorSkipped: app/Runtime install was skipped due to earlier errors.
	ErrorSkipped
	// ErrorNeedNewFlatpak: app/Runtime needs a more recent version of flatpak.
	ErrorNeedNewFlatpak
	// ErrorRemoteNotFound: specified remote was not found.
	ErrorRemoteNotFound
	// ErrorRuntimeNotFound: runtime needed for the app was not found.
	ErrorRuntimeNotFound
	// ErrorDowngrade: pulled commit is a downgrade, and a downgrade wasn't
	// specifically allowed. (Since: 1.0).
	ErrorDowngrade
	// ErrorInvalidRef: ref could not be parsed. (Since: 1.0.3).
	ErrorInvalidRef
	// ErrorInvalidData: invalid data. (Since: 1.0.3).
	ErrorInvalidData
	// ErrorUntrusted: missing GPG key or signature. (Since: 1.0.3).
	ErrorUntrusted
	// ErrorSetupFailed: sandbox setup failed. (Since: 1.0.3).
	ErrorSetupFailed
	// ErrorExportFailed: exporting data failed. (Since: 1.0.3).
	ErrorExportFailed
	// ErrorRemoteUsed: remote can't be uninstalled. (Since: 1.0.3).
	ErrorRemoteUsed
	// ErrorRuntimeUsed: runtime can't be uninstalled. (Since: 1.0.3).
	ErrorRuntimeUsed
	// ErrorInvalidName: application, runtime or remote name is invalid. (Since:
	// 1.0.3).
	ErrorInvalidName
	// ErrorOutOfSpace: more disk space needed. (Since: 1.2.0).
	ErrorOutOfSpace
	// ErrorWrongUser: operation is being attempted by the wrong user (such as
	// root operating on a user installation). (Since: 1.2.0).
	ErrorWrongUser
	// ErrorNotCached: cached data was requested, but it was not available.
	// (Since: 1.4.0).
	ErrorNotCached
	// ErrorRefNotFound: specified ref was not found. (Since: 1.4.0).
	ErrorRefNotFound
	// ErrorPermissionDenied: operation was not allowed by the administrative
	// policy. For example, an app is not allowed to be installed due to not
	// complying with the parental controls policy. (Since: 1.5.1).
	ErrorPermissionDenied
	// ErrorAuthenticationFailed: authentication operation failed, for example,
	// no correct password was supplied. (Since: 1.7.3).
	ErrorAuthenticationFailed
	// ErrorNotAuthorized: operation tried to access a ref, or information about
	// it that it was not authorized. For example, when succesfully
	// authenticating with a server but the user doesn't have permissions for a
	// private ref. (Since: 1.7.3).
	ErrorNotAuthorized
)

func marshalError(p uintptr) (interface{}, error) {
	return Error(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for Error.
func (e Error) String() string {
	switch e {
	case ErrorAlreadyInstalled:
		return "AlreadyInstalled"
	case ErrorNotInstalled:
		return "NotInstalled"
	case ErrorOnlyPulled:
		return "OnlyPulled"
	case ErrorDifferentRemote:
		return "DifferentRemote"
	case ErrorAborted:
		return "Aborted"
	case ErrorSkipped:
		return "Skipped"
	case ErrorNeedNewFlatpak:
		return "NeedNewFlatpak"
	case ErrorRemoteNotFound:
		return "RemoteNotFound"
	case ErrorRuntimeNotFound:
		return "RuntimeNotFound"
	case ErrorDowngrade:
		return "Downgrade"
	case ErrorInvalidRef:
		return "InvalidRef"
	case ErrorInvalidData:
		return "InvalidData"
	case ErrorUntrusted:
		return "Untrusted"
	case ErrorSetupFailed:
		return "SetupFailed"
	case ErrorExportFailed:
		return "ExportFailed"
	case ErrorRemoteUsed:
		return "RemoteUsed"
	case ErrorRuntimeUsed:
		return "RuntimeUsed"
	case ErrorInvalidName:
		return "InvalidName"
	case ErrorOutOfSpace:
		return "OutOfSpace"
	case ErrorWrongUser:
		return "WrongUser"
	case ErrorNotCached:
		return "NotCached"
	case ErrorRefNotFound:
		return "RefNotFound"
	case ErrorPermissionDenied:
		return "PermissionDenied"
	case ErrorAuthenticationFailed:
		return "AuthenticationFailed"
	case ErrorNotAuthorized:
		return "NotAuthorized"
	default:
		return fmt.Sprintf("Error(%d)", e)
	}
}
