// Code generated by girgen. DO NOT EDIT.

package flatpak

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gerror"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <flatpak.h>
// #include <glib-object.h>
import "C"

// glib.Type values for flatpak-ref.go.
var (
	GTypeRefKind = externglib.Type(C.flatpak_ref_kind_get_type())
	GTypeRef     = externglib.Type(C.flatpak_ref_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeRefKind, F: marshalRefKind},
		{T: GTypeRef, F: marshalRef},
	})
}

// RefKind: kind of artifact that a FlatpakRef refers to.
type RefKind C.gint

const (
	// RefKindApp: application.
	RefKindApp RefKind = iota
	// RefKindRuntime: runtime that applications can use.
	RefKindRuntime
)

func marshalRefKind(p uintptr) (interface{}, error) {
	return RefKind(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for RefKind.
func (r RefKind) String() string {
	switch r {
	case RefKindApp:
		return "App"
	case RefKindRuntime:
		return "Runtime"
	default:
		return fmt.Sprintf("RefKind(%d)", r)
	}
}

// RefOverrider contains methods that are overridable.
type RefOverrider interface {
}

type Ref struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*Ref)(nil)
)

func classInitReffer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapRef(obj *externglib.Object) *Ref {
	return &Ref{
		Object: obj,
	}
}

func marshalRef(p uintptr) (interface{}, error) {
	return wrapRef(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// FormatRefCached: like flatpak_ref_format_ref() but this returns the same
// string each time it's called rather than allocating a new one.
//
// The function returns the following values:
//
//    - utf8: string representation.
//
func (self *Ref) FormatRefCached() string {
	var _arg0 *C.FlatpakRef // out
	var _cret *C.char       // in

	_arg0 = (*C.FlatpakRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_ref_format_ref_cached(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Arch gets the arch or the ref.
//
// The function returns the following values:
//
//    - utf8: arch.
//
func (self *Ref) Arch() string {
	var _arg0 *C.FlatpakRef // out
	var _cret *C.char       // in

	_arg0 = (*C.FlatpakRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_ref_get_arch(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Branch gets the branch of the ref.
//
// The function returns the following values:
//
//    - utf8: branch.
//
func (self *Ref) Branch() string {
	var _arg0 *C.FlatpakRef // out
	var _cret *C.char       // in

	_arg0 = (*C.FlatpakRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_ref_get_branch(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// CollectionID gets the collection ID of the ref.
//
// The function returns the following values:
//
//    - utf8: collection ID.
//
func (self *Ref) CollectionID() string {
	var _arg0 *C.FlatpakRef // out
	var _cret *C.char       // in

	_arg0 = (*C.FlatpakRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_ref_get_collection_id(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Commit gets the commit of the ref.
//
// The function returns the following values:
//
//    - utf8: commit.
//
func (self *Ref) Commit() string {
	var _arg0 *C.FlatpakRef // out
	var _cret *C.char       // in

	_arg0 = (*C.FlatpakRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_ref_get_commit(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Kind gets the kind of artifact that this ref refers to.
//
// The function returns the following values:
//
//    - refKind: kind of artifact.
//
func (self *Ref) Kind() RefKind {
	var _arg0 *C.FlatpakRef    // out
	var _cret C.FlatpakRefKind // in

	_arg0 = (*C.FlatpakRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_ref_get_kind(_arg0)
	runtime.KeepAlive(self)

	var _refKind RefKind // out

	_refKind = RefKind(_cret)

	return _refKind
}

// Name gets the name of the ref.
//
// The function returns the following values:
//
//    - utf8: name.
//
func (self *Ref) Name() string {
	var _arg0 *C.FlatpakRef // out
	var _cret *C.char       // in

	_arg0 = (*C.FlatpakRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_ref_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// RefParse tries to parse a full ref name and return a Ref (without a commit
// set) or fail if the ref is invalid somehow.
//
// The function takes the following parameters:
//
//    - ref: string ref name, such as "app/org.test.App/x86_64/master".
//
// The function returns the following values:
//
//    - ret or NULL.
//
func RefParse(ref string) (*Ref, error) {
	var _arg1 *C.char       // out
	var _cret *C.FlatpakRef // in
	var _cerr *C.GError     // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(ref)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.flatpak_ref_parse(_arg1, &_cerr)
	runtime.KeepAlive(ref)

	var _ret *Ref    // out
	var _goerr error // out

	_ret = wrapRef(externglib.AssumeOwnership(unsafe.Pointer(_cret)))
	if _cerr != nil {
		_goerr = gerror.Take(unsafe.Pointer(_cerr))
	}

	return _ret, _goerr
}
