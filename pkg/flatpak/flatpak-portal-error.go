// Code generated by girgen. DO NOT EDIT.

package flatpak

import (
	"fmt"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <flatpak.h>
// #include <glib-object.h>
import "C"

// glib.Type values for flatpak-portal-error.go.
var GTypePortalError = externglib.Type(C.flatpak_portal_error_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypePortalError, F: marshalPortalError},
	})
}

// PortalError: error codes returned by portal calls.
type PortalError C.gint

const (
	// PortalErrorFailed: general portal failure.
	PortalErrorFailed PortalError = iota
	// PortalErrorInvalidArgument: argument was invalid.
	PortalErrorInvalidArgument
	// PortalErrorNotFound: object was not found.
	PortalErrorNotFound
	// PortalErrorExists: object already exists.
	PortalErrorExists
	// PortalErrorNotAllowed: call was not allowed.
	PortalErrorNotAllowed
	// PortalErrorCancelled: call was cancelled by the user.
	PortalErrorCancelled
	// PortalErrorWindowDestroyed: window was destroyed by the user.
	PortalErrorWindowDestroyed
)

func marshalPortalError(p uintptr) (interface{}, error) {
	return PortalError(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for PortalError.
func (p PortalError) String() string {
	switch p {
	case PortalErrorFailed:
		return "Failed"
	case PortalErrorInvalidArgument:
		return "InvalidArgument"
	case PortalErrorNotFound:
		return "NotFound"
	case PortalErrorExists:
		return "Exists"
	case PortalErrorNotAllowed:
		return "NotAllowed"
	case PortalErrorCancelled:
		return "Cancelled"
	case PortalErrorWindowDestroyed:
		return "WindowDestroyed"
	default:
		return fmt.Sprintf("PortalError(%d)", p)
	}
}
