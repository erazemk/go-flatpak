// Code generated by girgen. DO NOT EDIT.

package flatpak

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <flatpak.h>
// #include <glib-object.h>
import "C"

// glib.Type values for flatpak-remote-ref.go.
var GTypeRemoteRef = externglib.Type(C.flatpak_remote_ref_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeRemoteRef, F: marshalRemoteRef},
	})
}

// RemoteRefOverrider contains methods that are overridable.
type RemoteRefOverrider interface {
}

type RemoteRef struct {
	_ [0]func() // equal guard
	Ref
}

var (
	_ externglib.Objector = (*RemoteRef)(nil)
)

func classInitRemoteReffer(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapRemoteRef(obj *externglib.Object) *RemoteRef {
	return &RemoteRef{
		Ref: Ref{
			Object: obj,
		},
	}
}

func marshalRemoteRef(p uintptr) (interface{}, error) {
	return wrapRemoteRef(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// DownloadSize returns the download size of the ref.
//
// The function returns the following values:
//
//    - guint64: download size.
//
func (self *RemoteRef) DownloadSize() uint64 {
	var _arg0 *C.FlatpakRemoteRef // out
	var _cret C.guint64           // in

	_arg0 = (*C.FlatpakRemoteRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_remote_ref_get_download_size(_arg0)
	runtime.KeepAlive(self)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// Eol returns the end-of-life reason string, or NULL if the ref is not
// end-of-lifed.
//
// The function returns the following values:
//
//    - utf8: end-of-life reason or NULL.
//
func (self *RemoteRef) Eol() string {
	var _arg0 *C.FlatpakRemoteRef // out
	var _cret *C.char             // in

	_arg0 = (*C.FlatpakRemoteRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_remote_ref_get_eol(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// EolRebase returns the end-of-life rebased ref, or NULL if the ref is not
// end-of-lifed.
//
// The function returns the following values:
//
//    - utf8: end-of-life rebased ref or NULL.
//
func (self *RemoteRef) EolRebase() string {
	var _arg0 *C.FlatpakRemoteRef // out
	var _cret *C.char             // in

	_arg0 = (*C.FlatpakRemoteRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_remote_ref_get_eol_rebase(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// InstalledSize returns the installed size of the ref.
//
// The function returns the following values:
//
//    - guint64: installed size.
//
func (self *RemoteRef) InstalledSize() uint64 {
	var _arg0 *C.FlatpakRemoteRef // out
	var _cret C.guint64           // in

	_arg0 = (*C.FlatpakRemoteRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_remote_ref_get_installed_size(_arg0)
	runtime.KeepAlive(self)

	var _guint64 uint64 // out

	_guint64 = uint64(_cret)

	return _guint64
}

// Metadata returns the app metadata from the metadata cache of the ref.
//
// The function returns the following values:
//
//    - bytes (optional) with the metadata file contents or NULL.
//
func (self *RemoteRef) Metadata() *glib.Bytes {
	var _arg0 *C.FlatpakRemoteRef // out
	var _cret *C.GBytes           // in

	_arg0 = (*C.FlatpakRemoteRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_remote_ref_get_metadata(_arg0)
	runtime.KeepAlive(self)

	var _bytes *glib.Bytes // out

	if _cret != nil {
		_bytes = (*glib.Bytes)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		C.g_bytes_ref(_cret)
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_bytes)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_bytes_unref((*C.GBytes)(intern.C))
			},
		)
	}

	return _bytes
}

// RemoteName gets the remote name of the ref.
//
// The function returns the following values:
//
//    - utf8: remote name.
//
func (self *RemoteRef) RemoteName() string {
	var _arg0 *C.FlatpakRemoteRef // out
	var _cret *C.char             // in

	_arg0 = (*C.FlatpakRemoteRef)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.flatpak_remote_ref_get_remote_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}
